package com.github.sipe90.jakelunch.openai.model

import kotlinx.serialization.Contextual
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.JsonObject
import java.math.BigDecimal

/**
 *
 *
 * @param messages A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
 * @param model ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
 * @param frequencyPenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
 * @param logitBias Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.
 * @param logprobs Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of each output token returned in the `content` of `message`.
 * @param topLogprobs An integer between 0 and 20 specifying the number of most likely tokens to return at each token position, each with an associated log probability. `logprobs` must be set to `true` if this parameter is used.
 * @param maxTokens The maximum number of [tokens](/tokenizer) that can be generated in the chat completion. This value can be used to control [costs](https://openai.com/api/pricing/) for text generated via API.  This value is now deprecated in favor of `max_completion_tokens`, and is not compatible with [o1 series models](/docs/guides/reasoning).
 * @param maxCompletionTokens An upper bound for the number of tokens that can be generated for a completion, including visible output tokens and [reasoning tokens](/docs/guides/reasoning).
 * @param n How many chat completion choices to generate for each input message. Note that you will be charged based on the number of generated tokens across all of the choices. Keep `n` as `1` to minimize costs.
 * @param presencePenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/text-generation/parameter-details)
 * @param responseFormat
 * @param seed This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.
 * @param serviceTier Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:   - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.    - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - When not set, the default behavior is 'auto'.    When this parameter is set, the response body will include the `service_tier` utilized.
 * @param stop Up to 4 sequences where the API will stop generating further tokens.
 * @param stream If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
 * @param streamOptions
 * @param temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.
 * @param topP An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.
 * @param tools A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for. A max of 128 functions are supported.
 * @param toolChoice
 * @param parallelToolCalls Whether to enable [parallel function calling](/docs/guides/function-calling/parallel-function-calling) during tool use.
 * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
 * @param functionCall
 * @param functions Deprecated in favor of `tools`.  A list of functions the model may generate JSON inputs for.
 */
@Serializable
data class CreateChatCompletionRequest(
    @SerialName(value = "messages")
    val messages: List<ChatCompletionRequestMessage>,
    @SerialName(value = "model")
    val model: Model,
    @Contextual @SerialName(value = "frequency_penalty")
    val frequencyPenalty: BigDecimal? = BigDecimal("0"),
    @SerialName(value = "logit_bias")
    val logitBias: Map<String, Int>? = null,
    @SerialName(value = "logprobs")
    val logprobs: Boolean? = false,
    @SerialName(value = "top_logprobs")
    val topLogprobs: Int? = null,
    @SerialName(value = "max_tokens")
    @Deprecated(message = "This property is deprecated.")
    val maxTokens: Int? = null,
    @SerialName(value = "max_completion_tokens")
    val maxCompletionTokens: Int? = null,
    @SerialName(value = "n")
    val n: Int? = 1,
    @Contextual @SerialName(value = "presence_penalty")
    val presencePenalty: BigDecimal? = BigDecimal("0"),
    @SerialName(value = "response_format")
    val responseFormat: CreateChatCompletionRequestResponseFormat? = null,
    @SerialName(value = "seed")
    val seed: Int? = null,
    @SerialName(value = "service_tier")
    val serviceTier: ServiceTier? = null,
    @SerialName(value = "stop")
    val stop: List<String>? = null,
    @SerialName(value = "stream")
    val stream: Boolean? = false,
    @SerialName(value = "stream_options")
    val streamOptions: ChatCompletionStreamOptions? = null,
    @Contextual @SerialName(value = "temperature")
    val temperature: BigDecimal? = BigDecimal("1"),
    @Contextual @SerialName(value = "top_p")
    val topP: BigDecimal? = BigDecimal("1"),
    @SerialName(value = "tools")
    val tools: List<ChatCompletionTool>? = null,
    @SerialName(value = "tool_choice")
    val toolChoice: ChatCompletionToolChoiceOption? = null,
    @SerialName(value = "parallel_tool_calls")
    val parallelToolCalls: Boolean? = true,
    @SerialName(value = "user")
    val user: String? = null,
    @SerialName(value = "function_call")
    @Deprecated(message = "This property is deprecated.")
    val functionCall: CreateChatCompletionRequestFunctionCall? = null,
    @SerialName(value = "functions")
    @Deprecated(message = "This property is deprecated.")
    val functions: List<ChatCompletionFunctions>? = null,
) {
    /**
     * ID of the model to use. See the [model endpoint compatibility](/docs/models/model-endpoint-compatibility) table for details on which models work with the Chat API.
     */
    enum class Model(
        val value: String,
    ) {
        @SerialName(value = "gpt-4o")
        GPT4o("gpt-4o"),

        @SerialName(value = "gpt-4o-mini")
        GPT4oMINI("gpt-4o-mini"),

        @SerialName(value = "gpt-4")
        GPT4("gpt-4"),

        @SerialName(value = "gpt-3.5-turbo")
        GPT35TURBO("gpt-3.5-turbo"),
    }

    /**
     * Specifies the latency tier to use for processing the request. This parameter is relevant for customers subscribed to the scale tier service:   - If set to 'auto', and the Project is Scale tier enabled, the system will utilize scale tier credits until they are exhausted.    - If set to 'auto', and the Project is not Scale tier enabled, the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - If set to 'default', the request will be processed using the default service tier with a lower uptime SLA and no latency guarentee.   - When not set, the default behavior is 'auto'.    When this parameter is set, the response body will include the `service_tier` utilized.
     *
     * Values: auto,default
     */
    @Serializable
    enum class ServiceTier(
        val value: String,
    ) {
        @SerialName(value = "auto")
        AUTO("auto"),

        @SerialName(value = "default")
        DEFAULT("default"),
    }

    interface ChatCompletionRequestMessage {
        val role: Role

        /**
         * The role of the messages author.
         *
         * Values: system,user,assistant,tool,function
         */
        @Serializable
        enum class Role(
            val value: String,
        ) {
            @SerialName(value = "system")
            SYSTEM("system"),

            @SerialName(value = "user")
            USER("user"),

            @SerialName(value = "assistant")
            ASSISTANT("assistant"),

            @SerialName(value = "tool")
            TOOL("tool"),

            @SerialName(value = "function")
            FUNCTION("function"),
        }
    }

    /**
     *
     *
     * @param content The contents of the system message.
     * @param name An optional name for the participant. Provides the model information to differentiate between participants of the same role.
     */
    @Serializable
    data class ChatCompletionRequestSystemMessage(
        @SerialName(value = "content")
        val content: String,
        @SerialName(value = "name")
        val name: String,
    ) : ChatCompletionRequestMessage {
        @SerialName(value = "role")
        override val role: ChatCompletionRequestMessage.Role = ChatCompletionRequestMessage.Role.SYSTEM
    }

    /**
     *
     *
     * @param content The contents of the user message.
     * @param name An optional name for the participant. Provides the model information to differentiate between participants of the same role.
     */
    @Serializable
    data class ChatCompletionRequestUserMessage(
        @SerialName(value = "content")
        val content: List<ChatCompletionRequestUserMessageContentPart>,
        @SerialName(value = "name")
        val name: String,
    ) : ChatCompletionRequestMessage {
        @SerialName(value = "role")
        override val role: ChatCompletionRequestMessage.Role = ChatCompletionRequestMessage.Role.USER

        interface ChatCompletionRequestUserMessageContentPart {
            val type: MessageType

            /**
             *
             *
             * Values: text,image_url
             */
            @Serializable
            enum class MessageType(
                val value: String,
            ) {
                @SerialName(value = "text")
                TEXT("text"),

                @SerialName(value = "image_url")
                IMAGE_URL("image_url"),
            }
        }

        data class ChatCompletionRequestUserMessageTextContentPartPart(
            @SerialName(value = "text")
            val text: String,
        ) : ChatCompletionRequestUserMessageContentPart {
            override val type: ChatCompletionRequestUserMessageContentPart.MessageType =
                ChatCompletionRequestUserMessageContentPart.MessageType.TEXT
        }

        data class ChatCompletionRequestUserMessageUrlContentPartPart(
            @SerialName(value = "text")
            val text: String,
            @SerialName(value = "image_url")
            val imageUrl: ChatCompletionRequestUserMessageUrlContent,
        ) : ChatCompletionRequestUserMessageContentPart {
            override val type: ChatCompletionRequestUserMessageContentPart.MessageType =
                ChatCompletionRequestUserMessageContentPart.MessageType.IMAGE_URL

            data class ChatCompletionRequestUserMessageUrlContent(
                @SerialName(value = "url")
                val url: String,
                @SerialName(value = "detail")
                val detail: String? = null,
            )
        }
    }

    /**
     *
     *
     * @param content The contents of the assistant message. Required unless tool_calls or function_call is specified.
     * @param name An optional name for the participant. Provides the model information to differentiate between participants of the same role.
     * @param refusal The refusal message by the assistant.
     * @param toolCalls The tool calls generated by the model, such as function calls.
     * @param functionCall
     */
    @Serializable
    data class ChatCompletionRequestAssistantMessage(
        @SerialName(value = "content")
        val content: String? = null,
        @SerialName(value = "refusal")
        val refusal: String? = null,
        @SerialName(value = "name")
        val name: String,
        @SerialName(value = "tool_calls")
        val toolCalls: List<ChatCompletionMessageToolCall>? = null,
        @SerialName(value = "function_call")
        @Deprecated(message = "This property is deprecated.")
        val functionCall: ChatCompletionRequestAssistantMessageFunctionCall? = null,
    ) : ChatCompletionRequestMessage {
        @SerialName(value = "role")
        override val role: ChatCompletionRequestMessage.Role = ChatCompletionRequestMessage.Role.ASSISTANT

        /**
         *
         *
         * @param id The ID of the tool call.
         * @param type The type of the tool. Currently, only `function` is supported.
         * @param function
         */
        @Serializable
        data class ChatCompletionMessageToolCall(
            @SerialName(value = "id")
            val id: String,
            @SerialName(value = "type")
            val type: Type,
            @SerialName(value = "function")
            val function: ChatCompletionMessageToolCallFunction,
        ) {
            /**
             * The type of the tool. Currently, only `function` is supported.
             *
             * Values: function
             */
            @Serializable
            enum class Type(
                val value: String,
            ) {
                @SerialName(value = "function")
                FUNCTION("function"),
            }

            /**
             * The function that the model called.
             *
             * @param name The name of the function to call.
             * @param arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
             */
            @Serializable
            data class ChatCompletionMessageToolCallFunction(
                @SerialName(value = "name")
                val name: String,
                @SerialName(value = "arguments")
                val arguments: String,
            )
        }

        /**
         * Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
         *
         * @param arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
         * @param name The name of the function to call.
         */
        @Serializable
        @Deprecated(message = "This schema is deprecated.")
        data class ChatCompletionRequestAssistantMessageFunctionCall(
            @SerialName(value = "arguments")
            val arguments: String,
            @SerialName(value = "name")
            val name: String,
        )
    }

    /**
     *
     *
     * @param content The contents of the tool message.
     * @param toolCallId Tool call that this message is responding to.
     */
    @Serializable
    data class ChatCompletionRequestToolMessage(
        @SerialName(value = "content")
        val content: String,
        @SerialName(value = "tool_call_id")
        val toolCallId: String,
    ) : ChatCompletionRequestMessage {
        @SerialName(value = "role")
        override val role: ChatCompletionRequestMessage.Role = ChatCompletionRequestMessage.Role.TOOL
    }

    /**
     *
     *
     * @param content The contents of the function message.
     * @param name The name of the function to call.
     */
    @Serializable
    @Deprecated(message = "This schema is deprecated.")
    data class ChatCompletionRequestFunctionMessage(
        @SerialName(value = "content")
        val content: String,
        @SerialName(value = "name")
        val name: String,
    ) : ChatCompletionRequestMessage {
        @SerialName(value = "role")
        override val role: ChatCompletionRequestMessage.Role = ChatCompletionRequestMessage.Role.FUNCTION
    }

    /**
     * An object specifying the format that the model must output. Compatible with [GPT-4o](/docs/models/gpt-4o), [GPT-4o mini](/docs/models/gpt-4o-mini), [GPT-4 Turbo](/docs/models/gpt-4-and-gpt-4-turbo) and all GPT-3.5 Turbo models newer than `gpt-3.5-turbo-1106`.  Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured Outputs which ensures the model will match your supplied JSON schema. Learn more in the [Structured Outputs guide](/docs/guides/structured-outputs).  Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the message the model generates is valid JSON.  **Important:** when using JSON mode, you **must** also instruct the model to produce JSON yourself via a system or user message. Without this, the model may generate an unending stream of whitespace until the generation reaches the token limit, resulting in a long-running and seemingly \"stuck\" request. Also note that the message content may be partially cut off if `finish_reason=\"length\"`, which indicates the generation exceeded `max_tokens` or the conversation exceeded the max context length.
     *
     * @param type The type of response format being defined: `text`
     * @param jsonSchema
     */
    @Serializable
    data class CreateChatCompletionRequestResponseFormat(
        @SerialName(value = "type")
        val type: Type,
        @SerialName(value = "json_schema")
        val jsonSchema: ResponseFormatJsonSchemaJsonSchema,
    ) {
        /**
         * The type of response format being defined: `text`
         *
         * Values: text,json_object,json_schema
         */
        @Serializable
        enum class Type(
            val value: String,
        ) {
            @SerialName(value = "text")
            TEXT("text"),

            @SerialName(value = "json_object")
            JSON_OBJECT("json_object"),

            @SerialName(value = "json_schema")
            JSON_SCHEMA("json_schema"),
        }

        /**
         *
         *
         * @param name The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
         * @param description A description of what the response format is for, used by the model to determine how to respond in the format.
         * @param schema The schema for the response format, described as a JSON Schema object.
         * @param strict Whether to enable strict schema adherence when generating the output. If set to true, the model will always follow the exact schema defined in the `schema` field. Only a subset of JSON Schema is supported when `strict` is `true`. To learn more, read the [Structured Outputs guide](/docs/guides/structured-outputs).
         */
        @Serializable
        data class ResponseFormatJsonSchemaJsonSchema(
            @SerialName(value = "name")
            val name: String,
            @SerialName(value = "description")
            val description: String? = null,
            @Contextual @SerialName(value = "schema")
            val schema: JsonObject? = null,
            @SerialName(value = "strict")
            val strict: Boolean? = false,
        )
    }

    /**
     * Options for streaming response. Only set this when you set `stream: true`.
     *
     * @param includeUsage If set, an additional chunk will be streamed before the `data: [DONE]` message. The `usage` field on this chunk shows the token usage statistics for the entire request, and the `choices` field will always be an empty array. All other chunks will also include a `usage` field, but with a null value.
     */
    @Serializable
    data class ChatCompletionStreamOptions(
        @SerialName(value = "include_usage")
        val includeUsage: Boolean? = null,
    )

    /**
     *
     *
     * @param type The type of the tool. Currently, only `function` is supported.
     * @param function
     */
    @Serializable
    data class ChatCompletionTool(
        @SerialName(value = "type")
        val type: Type,
        @SerialName(value = "function")
        val function: FunctionObject,
    ) {
        /**
         * The type of the tool. Currently, only `function` is supported.
         *
         * Values: function
         */
        @Serializable
        enum class Type(
            val value: String,
        ) {
            @SerialName(value = "function")
            FUNCTION("function"),
        }

        /**
         *
         *
         * @param name The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
         * @param description A description of what the function does, used by the model to choose when and how to call the function.
         * @param parameters The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.   Omitting `parameters` defines a function with an empty parameter list.
         * @param strict Whether to enable strict schema adherence when generating the function call. If set to true, the model will follow the exact schema defined in the `parameters` field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn more about Structured Outputs in the [function calling guide](docs/guides/function-calling).
         */
        @Serializable
        data class FunctionObject(
            @SerialName(value = "name")
            val name: String,
            @SerialName(value = "description")
            val description: String? = null,
            @Contextual @SerialName(value = "parameters")
            val parameters: JsonObject? = null,
            @SerialName(value = "strict")
            val strict: Boolean? = false,
        )
    }

    /**
     * Controls which (if any) tool is called by the model. `none` means the model will not call any tool and instead generates a message. `auto` means the model can pick between generating a message or calling one or more tools. `required` means the model must call one or more tools. Specifying a particular tool via `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to call that tool.  `none` is the default when no tools are present. `auto` is the default if tools are present.
     *
     * @param type The type of the tool. Currently, only `function` is supported.
     * @param function
     */
    @Serializable
    data class ChatCompletionToolChoiceOption(
        @SerialName(value = "type")
        val type: Type,
        @SerialName(value = "function")
        val function: ChatCompletionNamedToolChoiceFunction,
    ) {
        /**
         * The type of the tool. Currently, only `function` is supported.
         *
         * Values: function
         */
        @Serializable
        enum class Type(
            val value: String,
        ) {
            @SerialName(value = "function")
            FUNCTION("function"),
        }

        /**
         *
         *
         * @param name The name of the function to call.
         */
        @Serializable
        data class ChatCompletionNamedToolChoiceFunction(
            @SerialName(value = "name")
            val name: String,
        )
    }

    /**
     * Deprecated in favor of `tool_choice`.  Controls which (if any) function is called by the model. `none` means the model will not call a function and instead generates a message. `auto` means the model can pick between generating a message or calling a function. Specifying a particular function via `{\"name\": \"my_function\"}` forces the model to call that function.  `none` is the default when no functions are present. `auto` is the default if functions are present.
     *
     * @param name The name of the function to call.
     */
    @Serializable
    @Deprecated(message = "This schema is deprecated.")
    data class CreateChatCompletionRequestFunctionCall(
        @SerialName(value = "name")
        val name: String,
    )

    /**
     *
     *
     * @param name The name of the function to be called. Must be a-z, A-Z, 0-9, or contain underscores and dashes, with a maximum length of 64.
     * @param description A description of what the function does, used by the model to choose when and how to call the function.
     * @param parameters The parameters the functions accepts, described as a JSON Schema object. See the [guide](/docs/guides/function-calling) for examples, and the [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for documentation about the format.   Omitting `parameters` defines a function with an empty parameter list.
     */
    @Serializable
    @Deprecated(message = "This schema is deprecated.")
    data class ChatCompletionFunctions(
        @SerialName(value = "name")
        val name: String,
        @SerialName(value = "description")
        val description: String? = null,
        @Contextual @SerialName(value = "parameters")
        val parameters: JsonObject? = null,
    )
}
