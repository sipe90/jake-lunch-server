package com.github.sipe90.lunchscraper.openai.model

import kotlinx.serialization.Contextual
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * Represents a chat completion response returned by model, based on the provided input.
 *
 * @param id A unique identifier for the chat completion.
 * @param choices A list of chat completion choices. Can be more than one if `n` is greater than 1.
 * @param created The Unix timestamp (in seconds) of when the chat completion was created.
 * @param model The model used for the chat completion.
 * @param `object` The object type, which is always `chat.completion`.
 * @param serviceTier The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.
 * @param systemFingerprint This fingerprint represents the backend configuration that the model runs with.  Can be used in conjunction with the `seed` request parameter to understand when backend changes have been made that might impact determinism.
 * @param usage
 */
@Serializable
data class CreateChatCompletionResponse(
    @SerialName(value = "id")
    val id: String,
    @SerialName(value = "choices")
    val choices: List<CreateChatCompletionResponseChoicesInner>,
    @SerialName(value = "created")
    val created: Int,
    @SerialName(value = "model")
    val model: String,
    @SerialName(value = "object")
    val `object`: Object,
    @SerialName(value = "service_tier")
    val serviceTier: ServiceTier? = null,
    @SerialName(value = "system_fingerprint")
    val systemFingerprint: String? = null,
    @SerialName(value = "usage")
    val usage: CompletionUsage? = null,
) {
    /**
     * The object type, which is always `chat.completion`.
     *
     * Values: chatPeriodCompletion
     */
    @Serializable
    enum class Object(
        val value: String,
    ) {
        @SerialName(value = "chat.completion")
        CHAT_COMPLETION("chat.completion"),
    }

    /**
     * The service tier used for processing the request. This field is only included if the `service_tier` parameter is specified in the request.
     *
     * Values: scale,default
     */
    @Serializable
    enum class ServiceTier(
        val value: String,
    ) {
        @SerialName(value = "scale")
        SCALE("scale"),

        @SerialName(value = "default")
        DEFAULT("default"),
    }

    /**
     *
     *
     * @param finishReason The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
     * @param index The index of the choice in the list of choices.
     * @param message
     * @param logprobs
     */
    @Serializable
    data class CreateChatCompletionResponseChoicesInner(
        @SerialName(value = "finish_reason")
        val finishReason: FinishReason,
        @SerialName(value = "index")
        val index: Int,
        @SerialName(value = "message")
        val message: ChatCompletionResponseMessage,
        @SerialName(value = "logprobs")
        val logprobs: CreateChatCompletionResponseChoicesInnerLogprobs?,
    ) {
        /**
         * The reason the model stopped generating tokens. This will be `stop` if the model hit a natural stop point or a provided stop sequence, `length` if the maximum number of tokens specified in the request was reached, `content_filter` if content was omitted due to a flag from our content filters, `tool_calls` if the model called a tool, or `function_call` (deprecated) if the model called a function.
         *
         * Values: stop,length,tool_calls,content_filter,function_call
         */
        @Serializable
        enum class FinishReason(
            val value: String,
        ) {
            @SerialName(value = "stop")
            STOP("stop"),

            @SerialName(value = "length")
            LENGTH("length"),

            @SerialName(value = "tool_calls")
            TOOL_CALLS("tool_calls"),

            @SerialName(value = "content_filter")
            CONTENT_FILTER("content_filter"),

            @SerialName(value = "function_call")
            FUNCTION_CALL("function_call"),
        }

        /**
         * A chat completion message generated by the model.
         *
         * @param content The contents of the message.
         * @param refusal The refusal message generated by the model.
         * @param role The role of the author of this message.
         * @param toolCalls The tool calls generated by the model, such as function calls.
         * @param functionCall
         */
        @Serializable
        data class ChatCompletionResponseMessage(
            @SerialName(value = "content")
            val content: String?,
            @SerialName(value = "refusal")
            val refusal: String?,
            @SerialName(value = "role")
            val role: Role,
            @SerialName(value = "tool_calls")
            val toolCalls: List<ChatCompletionMessageToolCall>? = null,
            @SerialName(value = "function_call")
            @Deprecated(message = "This property is deprecated.")
            val functionCall: ChatCompletionResponseMessageFunctionCall? = null,
        ) {
            /**
             * The role of the author of this message.
             *
             * Values: assistant
             */
            @Serializable
            enum class Role(
                val value: String,
            ) {
                @SerialName(value = "assistant")
                ASSISTANT("assistant"),
            }

            /**
             *
             *
             * @param id The ID of the tool call.
             * @param type The type of the tool. Currently, only `function` is supported.
             * @param function
             */
            @Serializable
            data class ChatCompletionMessageToolCall(
                @SerialName(value = "id")
                val id: String,
                @SerialName(value = "type")
                val type: Type,
                @SerialName(value = "function")
                val function: ChatCompletionMessageToolCallFunction,
            ) {
                /**
                 * The type of the tool. Currently, only `function` is supported.
                 *
                 * Values: function
                 */
                @Serializable
                enum class Type(
                    val value: String,
                ) {
                    @SerialName(value = "function")
                    FUNCTION("function"),
                }

                /**
                 * The function that the model called.
                 *
                 * @param name The name of the function to call.
                 * @param arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
                 */
                @Serializable
                data class ChatCompletionMessageToolCallFunction(
                    @SerialName(value = "name")
                    val name: String,
                    @SerialName(value = "arguments")
                    val arguments: String,
                )
            }

            /**
             * Deprecated and replaced by `tool_calls`. The name and arguments of a function that should be called, as generated by the model.
             *
             * @param arguments The arguments to call the function with, as generated by the model in JSON format. Note that the model does not always generate valid JSON, and may hallucinate parameters not defined by your function schema. Validate the arguments in your code before calling your function.
             * @param name The name of the function to call.
             */
            @Serializable
            @Deprecated(message = "This schema is deprecated.")
            data class ChatCompletionResponseMessageFunctionCall(
                @SerialName(value = "arguments")
                val arguments: String,
                @SerialName(value = "name")
                val name: String,
            )
        }

        /**
         * Log probability information for the choice.
         *
         * @param content A list of message content tokens with log probability information.
         * @param refusal A list of message refusal tokens with log probability information.
         */
        @Serializable
        data class CreateChatCompletionResponseChoicesInnerLogprobs(
            @SerialName(value = "content")
            val content: List<ChatCompletionTokenLogprob>?,
            @SerialName(value = "refusal")
            val refusal: List<ChatCompletionTokenLogprob>?,
        ) {
            /**
             *
             *
             * @param token The token.
             * @param logprob The log probability of this token, if it is within the top 20 most likely tokens. Otherwise, the value `-9999.0` is used to signify that the token is very unlikely.
             * @param bytes A list of integers representing the UTF-8 bytes representation of the token. Useful in instances where characters are represented by multiple tokens and their byte representations must be combined to generate the correct text representation. Can be `null` if there is no bytes representation for the token.
             * @param topLogprobs List of the most likely tokens and their log probability, at this token position. In rare cases, there may be fewer than the number of requested `top_logprobs` returned.
             */
            @Serializable
            data class ChatCompletionTokenLogprob(
                @SerialName(value = "token")
                val token: String,
                @Contextual @SerialName(value = "logprob")
                val logprob: java.math.BigDecimal,
                @SerialName(value = "bytes")
                val bytes: List<Int>?,
                @SerialName(value = "top_logprobs")
                val topLogprobs: List<ChatCompletionTokenLogprobTopLogprobsInner>,
            ) {
                @Serializable
                data class ChatCompletionTokenLogprobTopLogprobsInner(
                    @SerialName(value = "token")
                    val token: String,
                    @Contextual @SerialName(value = "logprob")
                    val logprob: java.math.BigDecimal,
                    @SerialName(value = "bytes")
                    val bytes: List<Int>?,
                )
            }
        }
    }

    /**
     * Usage statistics for the completion request.
     *
     * @param completionTokens Number of tokens in the generated completion.
     * @param promptTokens Number of tokens in the prompt.
     * @param totalTokens Total number of tokens used in the request (prompt + completion).
     * @param completionTokensDetails
     */
    @Serializable
    data class CompletionUsage(
        @SerialName(value = "completion_tokens")
        val completionTokens: Int,
        @SerialName(value = "prompt_tokens")
        val promptTokens: Int,
        @SerialName(value = "total_tokens")
        val totalTokens: Int,
        @SerialName(value = "completion_tokens_details")
        val completionTokensDetails: CompletionUsageCompletionTokensDetails? = null,
    ) {
        /**
         * Breakdown of tokens used in a completion.
         *
         * @param reasoningTokens Tokens generated by the model for reasoning.
         */
        @Serializable
        data class CompletionUsageCompletionTokensDetails(
            @SerialName(value = "reasoning_tokens")
            val reasoningTokens: Int? = null,
        )
    }
}
